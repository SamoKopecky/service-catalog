# Base config

app:
  title: Operate First Cloud
  baseUrl: http://localhost:3000
  support:
    url: https://github.com/operate-first/support/issues
    items:  # Used by common SupportButton component
      - icon: github
        title: Issues
        links:
          - url: https://github.com/operate-first/support/issues
            title: GitHub Issues
      - title: Slack Chatroom
        icon: chat
        links:
          - url: https://join.slack.com/t/operatefirst/shared_invite/zt-o2gn4wn8-O39g7sthTAuPCvaCNRnLww
            title: "#support"

organization:
  name: Operate First Cloud

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
  # information on the format
  auth:
    keys:
      - secret: abc
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
  # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  csp:
    connect-src: ["'self'", "http:", "https:"]
    img-src: ["'self'", "https:", "data:"]
    default-src: ["'self'", "https:"]
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    client: better-sqlite3
    connection: ":memory:"
  # This is for local developement only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  cache:
    store: memory
    # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
    # workingDirectory: /tmp
  reading:
    allow:
      - host: "argocd.operate-first.cloud"
      - host: "raw.githubusercontent.com"
      - host: "gist.githubusercontent.com"
      - host: "docs.pulpproject.org"

proxy:
  "/argocd/api":
    # url to the api of your hosted argoCD instance
    target: https://argocd.operate-first.cloud/api/v1/
    changeOrigin: true
    # this line is required if your hosted argoCD instance has self-signed certificate
    secure: true
    headers:
      Cookie:
        $env: ARGOCD_AUTH_TOKEN
  "/grafana/api":
    target: https://grafana.operate-first.cloud
    headers:
      Authorization: Bearer ${GRAFANA_TOKEN}
  "/prometheus/api":
    target: https://rbac-query-proxy-open-cluster-management-observability.apps.moc-infra.massopen.cloud/api/v1
    headers:
      Authorization: Bearer ${MCO_TOKEN}

grafana:
  # Publicly accessible domain
  domain: https://grafana.operate-first.cloud

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
techdocs:
  builder: "local"
  generator:
    runIn: "local"
  publisher:
    type: "local"

catalog:
  readonly: true
  rules:
    - allow:
        - Component
        - System
        - Location
        - User
        - Group
        - Domain
        - Api
        - Resource
  locations:
    - type: file
      target: ../../examples/all.yaml
  providers:
    keycloakOrg:
      default:
        baseUrl: https://keycloak-keycloack.apps.devskopecky.dev.datahub.redhat.com
        loginRealm: master
        realm: master
        clientId: backstage
        clientSecret: PriGUScaQ2nHYdZhLXzcD7esq5WwtDS7

permission:
  enabled: true

auth:
  environment: development
  providers:
    google:
      development:
        clientId: ${AUTH_GOOGLE_CLIENT_ID}
        clientSecret: ${AUTH_GOOGLE_CLIENT_SECRET}

kubernetes:
  serviceLocatorMethod:
    type: "multiTenant"
  clusterLocatorMethods:
    - type: "config"
      clusters:
        - url: http://localhost:6443
          name: infra
          # authProvider: "serviceAccount"
          # serviceAccountToken: ${moc_infra_token}
          authProvider: oidc
          oidcTokenProvider: google
          skipTLSVerify: true
          skipMetricsLookup: false

webTerminal:
  webSocketUrl: "wss://example.com:3000"

ocm:
  cluster: infra

searchInitialDelay: 5
